Question 1 

Ix = illegitimate = â…“ of legitimate 
Lx = legit for x = 1,...,n 

We have an inheritance: var inheritance 
method for Ix: illegitimate 
method for Lx: legitimate 

n children: could be an array 
x: number of children that are illegitimate '

in an array of n children, x are illegit 
we want to compute: 
    Ix, the share to each x and 
    Lx, the share to each n - x 
    
1. use array???
2. find the amount of ill(x) and leg(n-x)
3. each x = 1/3(n-x)
4. each (n-x) gets that divided by (n-x)


Thine algorithm <3

1A)  Suppose there are n children, of whom x are illegitimate. Design an algorithm
that allows you to compute Ix, the share due each illegitimate child, and Lx, the
share due each legitimate child, for x = 1, . . . , n.

public class YourClassNameHere {
  
  static void calcInheritance(int n, int x, int totalInherit){ //we have n children, x are illegitimate, then the total amount that is being split 

        int numOfI = x; //illegitimate children 
        int numOfL = n-x; //legitimate children 
        double Ix = 0.0; //amount each gets 
        double Lx = 0.0;

        //calc what it would be, divided equally
        double ifEqual = totalInherit/n;
        
        if( n == x){
             Ix = (1/3)(ifEqual); 
        }

        Ix =  ifEqual/3; //how much each illegit gets

        //now calc legit
        Lx = (totalInherit - (Ix * numOfI))/numOfL; // we do total - (num each gets * each person) divided by number of legit people that gets some


}

    public static void main(String[] args) {
      calcInheritance(7,4,750);
      //Ix	35.666666666666664
      //Lx	202.44444444444446
    }
}


alternatively.... if it is a ratio

calcInheritance(int n, int x){ //we have n children, x are illegitimate

int numOfI = x; //illegitimate children 
int numOfL = n-x; //legitimate children 
double Ix = 0.0; //amount each gets 
double Lx = 0.0;

//calc what it would be, divided equally
double ifEqual = 1/n;

if( n == x){
 Ix = (ifEqual)/3; 
 Lx = 0;
}

Ix =  ifEqual/3; //how much each illegit gets

//now calc legit
Lx = (1 - (Ix * numOfI))/numOfL; // we do total - (num each gets * each person) divided by number of legit people that gets some


}



1B) As a function of n, how many operations are used by your algorithm? A big-O
result is sufficient

This is constant because there are no loops, it does simple math. This is O(1).

1C) Use your procedure to determine the shares when n = 7 and x = 4
somethign might be wrong but I will pretend the inheritance is $750 total:
750/7 = 107
Ix = (1/3)107 = 35.714
Lx = (750-(35.714*4))/3 = 202.38

-------------------------------------------------------------------------------
Use your procedure to determine the shares when n = 7 and x = 4
if equal = 1/7
Ix = (1/3)(1/7) 
   = 1/21
Lx = (1/21)*4 = 4/21
   = 1-(4/21) =17/21
   = (17/21) / 3 
   = 17/63
 

if the inheritance is $750, each legitimate child gets $94.155 and each illegitimate child ets $22.72

1D) Naive algorithm design can have unintended effects. Discuss what happens when x = n
I will try to do that here
n = 4, x = 4 
750/(7+4) = 68.18
Ix = (1/3)68.18 = 22.72
Lx = (750-(22.72*4))/7 = 94.155

when x = n that means that all the children are illegitimate. That means that there would be money left over?? Then I added an if statement so that its divided
equally then they take 1/3 out??






